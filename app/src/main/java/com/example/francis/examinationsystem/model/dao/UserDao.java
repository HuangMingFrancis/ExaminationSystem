package com.example.francis.examinationsystem.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.francis.examinationsystem.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserAccount = new Property(1, String.class, "userAccount", false, "USER_ACCOUNT");
        public final static Property UserPsw = new Property(2, String.class, "userPsw", false, "USER_PSW");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property UserHead = new Property(4, String.class, "userHead", false, "USER_HEAD");
        public final static Property UserEmail = new Property(5, String.class, "userEmail", false, "USER_EMAIL");
        public final static Property School = new Property(6, String.class, "school", false, "SCHOOL");
        public final static Property Type = new Property(7, Integer.class, "type", false, "TYPE");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ACCOUNT\" TEXT," + // 1: userAccount
                "\"USER_PSW\" TEXT," + // 2: userPsw
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"USER_HEAD\" TEXT," + // 4: userHead
                "\"USER_EMAIL\" TEXT," + // 5: userEmail
                "\"SCHOOL\" TEXT," + // 6: school
                "\"TYPE\" INTEGER);"); // 7: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userAccount = entity.getUserAccount();
        if (userAccount != null) {
            stmt.bindString(2, userAccount);
        }
 
        String userPsw = entity.getUserPsw();
        if (userPsw != null) {
            stmt.bindString(3, userPsw);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String userHead = entity.getUserHead();
        if (userHead != null) {
            stmt.bindString(5, userHead);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(6, userEmail);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(7, school);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(8, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userAccount = entity.getUserAccount();
        if (userAccount != null) {
            stmt.bindString(2, userAccount);
        }
 
        String userPsw = entity.getUserPsw();
        if (userPsw != null) {
            stmt.bindString(3, userPsw);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String userHead = entity.getUserHead();
        if (userHead != null) {
            stmt.bindString(5, userHead);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(6, userEmail);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(7, school);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(8, type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userAccount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userPsw
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userHead
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userEmail
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // school
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserPsw(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserHead(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSchool(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
