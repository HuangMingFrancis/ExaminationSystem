package com.example.francis.examinationsystem.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.francis.examinationsystem.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User_account = new Property(0, String.class, "user_account", true, "USER_ACCOUNT");
        public final static Property User_psw = new Property(1, String.class, "user_psw", false, "USER_PSW");
        public final static Property User_name = new Property(2, String.class, "user_name", false, "USER_NAME");
        public final static Property User_head = new Property(3, String.class, "user_head", false, "USER_HEAD");
        public final static Property User_email = new Property(4, String.class, "user_email", false, "USER_EMAIL");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"USER_ACCOUNT\" TEXT PRIMARY KEY NOT NULL ," + // 0: user_account
                "\"USER_PSW\" TEXT," + // 1: user_psw
                "\"USER_NAME\" TEXT," + // 2: user_name
                "\"USER_HEAD\" TEXT," + // 3: user_head
                "\"USER_EMAIL\" TEXT);"); // 4: user_email
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String user_account = entity.getUser_account();
        if (user_account != null) {
            stmt.bindString(1, user_account);
        }
 
        String user_psw = entity.getUser_psw();
        if (user_psw != null) {
            stmt.bindString(2, user_psw);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
 
        String user_head = entity.getUser_head();
        if (user_head != null) {
            stmt.bindString(4, user_head);
        }
 
        String user_email = entity.getUser_email();
        if (user_email != null) {
            stmt.bindString(5, user_email);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String user_account = entity.getUser_account();
        if (user_account != null) {
            stmt.bindString(1, user_account);
        }
 
        String user_psw = entity.getUser_psw();
        if (user_psw != null) {
            stmt.bindString(2, user_psw);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
 
        String user_head = entity.getUser_head();
        if (user_head != null) {
            stmt.bindString(4, user_head);
        }
 
        String user_email = entity.getUser_email();
        if (user_email != null) {
            stmt.bindString(5, user_email);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // user_account
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_psw
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_head
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // user_email
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUser_account(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUser_psw(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_head(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_email(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getUser_account();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getUser_account();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getUser_account() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
